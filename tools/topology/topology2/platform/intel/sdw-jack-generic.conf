# include deep buffer config if buffer size is in 1 - 1000 ms.
IncludeByKey.PASSTHROUGH {
"false" {
	IncludeByKey.DEEPBUFFER_FW_DMA_MS {
		"([1-9]|[1-9][0-9]|[1-9][0-9][0-9]|1000)" "platform/intel/deep-buffer.conf"
	}
}
}

Define {
	JACK_PLAYBACK_PCM_NAME	"Jack Out"
	JACK_CAPTURE_PCM_NAME	"Jack In"
	SDW_JACK_FMT_24		"false"
}

#
# List of all DAIs
#
Object.Dai.ALH [
	{
		dai_index 0
		id 		$SDW_JACK_OUT_BE_ID
		direction	"playback"
		name		$SDW_JACK_OUT_STREAM
		default_hw_conf_id	0
		rate			48000
		channels		2

		Object.Base.hw_config.1 {
			id	0
			name	"ALH2"
		}
	}
	{
		dai_index 10
		id 		$SDW_JACK_IN_BE_ID
		direction	"capture"
		name		$SDW_JACK_IN_STREAM
		default_hw_conf_id	0
		rate			48000
		channels		2

		Object.Base.hw_config.1 {
			id	0
			name	"ALH3"
		}
	}
]

#
# Pipeline definitions
#
IncludeByKey.PASSTHROUGH {
"false" {
	Object.Pipeline {
		host-copier-gain-mixin-playback [
			{
				index 0

				Object.Widget.host-copier.1 {
					stream_name "volume playback 0"
					pcm_id 0
				}
				Object.Widget.gain.1 {
					Object.Control.mixer.1 {
							name 'Pre Mixer $JACK_PLAYBACK_PCM_NAME Playback Volume'
						}
				}
			}
		]

		mixout-gain-alh-dai-copier-playback [
			{
				index 1

				Object.Widget.alh-copier.1 {
					stream_name $SDW_JACK_OUT_STREAM
					node_type $ALH_LINK_OUTPUT_CLASS
					IncludeByKey.SDW_JACK_FMT_24 {
					"true"	{
							num_output_audio_formats 1
							Object.Base.output_audio_format [
								{
									out_bit_depth           32
									out_valid_bit_depth     24
									out_sample_type		$SAMPLE_TYPE_MSB_INTEGER
									out_fmt_cfg		"$[($out_channels | ($out_valid_bit_depth * 256)) | ($out_sample_type * 65536)]"
								}
							]
						}
					}
				}
				Object.Widget.gain.1 {
					Object.Control.mixer.1 {
						name 'Post Mixer $JACK_PLAYBACK_PCM_NAME Playback Volume'
					}
				}
			}
		]
	}
}
"true" {
	Object.Pipeline.host-gateway-playback [
		{
			index	0
			Object.Widget.host-copier.1 {
				stream_name "volume playback 0"
				pcm_id 0
				num_input_audio_formats 3
				Object.Base.input_audio_format [
					{
						in_bit_depth            16
						in_valid_bit_depth      16
					}
					{
						in_bit_depth            32
						in_valid_bit_depth      24
					}
					{
						in_bit_depth            32
						in_valid_bit_depth      32
					}
				]
				num_output_audio_formats 3
				Object.Base.output_audio_format [
					{
						out_bit_depth           16
						out_valid_bit_depth     16
					}
					{
						out_bit_depth           32
						out_valid_bit_depth     24
					}
					{
						out_bit_depth           32
						out_valid_bit_depth     32
					}
				]
			}
		}
	]

	Object.Widget {
		alh-copier [
			{
				stream_name $SDW_JACK_OUT_STREAM
				node_type $ALH_LINK_OUTPUT_CLASS
				num_input_audio_formats 3
				index 1
				type dai_in
				direction	playback
				num_input_pins 1
				Object.Base.input_audio_format [
					{
						in_bit_depth            16
						in_valid_bit_depth      16
						in_sample_type		$SAMPLE_TYPE_MSB_INTEGER
						in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
					}
					{
						in_bit_depth            32
						in_valid_bit_depth      24
						in_sample_type		$SAMPLE_TYPE_MSB_INTEGER
						in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
					}
					{
						in_bit_depth            32
						in_valid_bit_depth      32
						in_sample_type		$SAMPLE_TYPE_MSB_INTEGER
						in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
					}
				]
				IncludeByKey.SDW_JACK_FMT_24 {
				"true"	{
						num_output_audio_formats 1
						Object.Base.output_audio_format [
							{
								out_bit_depth           32
								out_valid_bit_depth     24
								out_sample_type		$SAMPLE_TYPE_MSB_INTEGER
								out_fmt_cfg		"$[($out_channels | ($out_valid_bit_depth * 256))]"
							}
						]
					}
				"false" {
						num_output_audio_formats 3
						Object.Base.output_audio_format [
							{
								out_bit_depth           16
								out_valid_bit_depth     16
								out_sample_type		$SAMPLE_TYPE_MSB_INTEGER
								out_fmt_cfg		"$[($out_channels | ($out_valid_bit_depth * 256))]"
							}
							{
								out_bit_depth           32
								out_valid_bit_depth     24
								out_sample_type		$SAMPLE_TYPE_MSB_INTEGER
								out_fmt_cfg		"$[($out_channels | ($out_valid_bit_depth * 256))]"
							}
							{
								out_bit_depth           32
								out_valid_bit_depth     32
								out_sample_type		$SAMPLE_TYPE_MSB_INTEGER
								out_fmt_cfg		"$[($out_channels | ($out_valid_bit_depth * 256))]"
							}
						]
					}
				}
			}
		]
		pipeline [
			{
				index			1
				priority		0
				lp_mode		0
				dynamic_pipeline	1
			}
		]
	}
	}
}

Object.Pipeline.host-gateway-capture [
	{
		index 10

		Object.Widget.host-copier.1 {
			stream_name	"Passthrough Capture 0"
			pcm_id 1
			num_input_audio_formats 3
			num_output_audio_formats 9
			Object.Base.input_audio_format [
				# 32-bit 48KHz 2ch
				{
					in_bit_depth 32
					in_valid_bit_depth 32
				}
				# 32-bit 48KHz 4ch
				{
					in_bit_depth 32
					in_valid_bit_depth 32
					in_channels 4
					in_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
					in_ch_map	$CHANNEL_MAP_3_POINT_1
				}
				# 32-bit 48KHz 1ch
				{
					in_channels		1
					in_bit_depth		32
					in_valid_bit_depth	32
					in_ch_cfg	$CHANNEL_CONFIG_MONO
					in_ch_map	$CHANNEL_MAP_MONO
				}
			]

			CombineArrays.Object.Base.output_audio_format [
				# array of 2ch formats with range of out valid bit depths
				{
					out_bit_depth [ 32 ]
					out_valid_bit_depth [
						24
						32
					]
				}
				# array of 4ch formats with range of out valid bit depths
				{
					out_bit_depth [	32 ]
					out_valid_bit_depth [
						24
						32
					]
					out_channels [ 4 ]
					out_ch_cfg [ $CHANNEL_CONFIG_3_POINT_1 ]
					out_ch_map [ $CHANNEL_MAP_3_POINT_1 ]
				}
				# array of 1ch formats with range of out valid bit depths
				{
					out_bit_depth [	32 ]
					out_valid_bit_depth [
						24
						32
					]
					out_channels [ 1 ]
					out_ch_cfg [ $CHANNEL_CONFIG_MONO ]
					out_ch_map [ $CHANNEL_MAP_MONO ]
				}
				# 16-bit 2ch
				{
					out_bit_depth		[ 16 ]
					out_valid_bit_depth	[ 16 ]
				}
				# 16-bit 4ch
				{
					out_bit_depth		[ 16 ]
					out_valid_bit_depth	[ 16 ]
					out_channels 		[ 4 ]
					out_ch_cfg		[ $CHANNEL_CONFIG_3_POINT_1 ]
					out_ch_map		[ $CHANNEL_MAP_3_POINT_1 ]
				}
				# 16-bit 1ch
				{
					out_channels		[ 1 ]
					out_bit_depth		[ 16 ]
					out_valid_bit_depth	[ 16 ]
					out_ch_cfg		[ $CHANNEL_CONFIG_MONO ]
					out_ch_map		[ $CHANNEL_MAP_MONO ]
				}
			]
		}
	}
]

# Jack capture pipeline widgets
Object.Widget {
	alh-copier [
		{
			stream_name	$SDW_JACK_IN_STREAM
			direction	"capture"
			type		"dai_out"
			index		11
			node_type $ALH_LINK_INPUT_CLASS
			num_input_audio_formats 1
			num_output_audio_formats 1
			num_output_pins 1

			IncludeByKey.SDW_JACK_FMT_24 {
			"true"	{
					Object.Base.input_audio_format [
						{
							in_bit_depth		32
							in_valid_bit_depth	24
							in_sample_type		$SAMPLE_TYPE_MSB_INTEGER
							in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
						}
					]
				}
			"false"	{
					Object.Base.input_audio_format [
						{
							in_bit_depth		32
							in_valid_bit_depth	32
							in_sample_type		$SAMPLE_TYPE_MSB_INTEGER
							in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
						}
					]
				}
			}
			Object.Base.output_audio_format [
				{
					out_bit_depth		32
					out_valid_bit_depth	32
					out_sample_type		$SAMPLE_TYPE_MSB_INTEGER
					out_fmt_cfg		"$[($out_channels | ($out_valid_bit_depth * 256))]"
				}
			]
		}
	]

	pipeline [
		{
			index		11
			priority		0
			lp_mode		0
			dynamic_pipeline	1
		}
	]
}

IncludeByKey.PASSTHROUGH {
"false" {
	Object.Widget.eqiir [
		{
			num_input_audio_formats 1
			num_output_audio_formats 1
			index		11
			Object.Base.input_audio_format [
				{
					in_bit_depth		32
					in_valid_bit_depth	32
				}
			]
			Object.Base.output_audio_format [
				{
					out_bit_depth		32
					out_valid_bit_depth	32
				}
			]

			Object.Control.bytes."1" {
				<include/components/eqiir/highpass_40hz_0db_48khz.conf>
				name '$JACK_CAPTURE_PCM_NAME Capture IIR Eq'
			}
		}
	]
	}
}

Object.PCM.pcm [
	{
		name	"$JACK_PLAYBACK_PCM_NAME"
		id 0
		direction	"playback"
		Object.Base.fe_dai.1 {
			name	"$JACK_PLAYBACK_PCM_NAME"
		}

		Object.PCM.pcm_caps.1 {
			name "volume playback 0"
			formats 'S16_LE,S24_LE,S32_LE'
		}
	}
	{
		name	"$JACK_CAPTURE_PCM_NAME"
		id 1
		direction	"capture"
		Object.Base.fe_dai.1 {
			name	"$JACK_CAPTURE_PCM_NAME"
		}

		Object.PCM.pcm_caps.1 {
			name "Passthrough Capture 0"
			formats 'S16_LE,S24_LE,S32_LE'
			channels_min	$SDW_JACK_CAPTURE_CH
			channels_max	$SDW_JACK_CAPTURE_CH
		}
	}
]

IncludeByKey.PASSTHROUGH {
"false" {
	Object.Base.route [
		{
			source	"gain.1.1"
			sink	"alh-copier.$SDW_JACK_OUT_STREAM.0"
		}
		{
			source "mixin.0.1"
			sink "mixout.1.1"
		}
		{
			source	"alh-copier.$SDW_JACK_IN_STREAM.0"
			sink	"eqiir.11.0"
		}
		{
			source	"eqiir.11.0"
			sink	"host-copier.1.capture"
		}
		{
			source	"host-copier.0.playback"
			sink	"gain.0.1"
		}
	]
	}
"true"	{
	Object.Base.route [
		{
			source	"alh-copier.$SDW_JACK_IN_STREAM.0"
			sink	"host-copier.1.capture"
		}
		{
			source	"host-copier.0.playback"
			sink	"alh-copier.$SDW_JACK_OUT_STREAM.0"
		}
	]
	}
}
