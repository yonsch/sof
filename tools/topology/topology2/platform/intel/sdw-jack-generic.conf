# include deep buffer config if buffer size is in 1 - 1000 ms.
IncludeByKey.PASSTHROUGH {
"false" {
	IncludeByKey.DEEPBUFFER_FW_DMA_MS {
		"([1-9]|[1-9][0-9]|[1-9][0-9][0-9]|1000)" "platform/intel/deep-buffer.conf"
	}
}
}

Define {
       JACK_PLAYBACK_PCM_NAME	"Jack Out"
       JACK_CAPTURE_PCM_NAME	"Jack In"
}

#
# List of all DAIs
#
Object.Dai.ALH [
	{
		dai_index 0
		id 		$SDW_JACK_OUT_BE_ID
		direction	"playback"
		name		$SDW_JACK_OUT_STREAM
		default_hw_conf_id	0
		rate			48000
		channels		2

		Object.Base.hw_config.1 {
			id	0
			name	"ALH2"
		}
	}
	{
		dai_index 10
		id 		$SDW_JACK_IN_BE_ID
		direction	"capture"
		name		$SDW_JACK_IN_STREAM
		default_hw_conf_id	0
		rate			48000
		channels		2

		Object.Base.hw_config.1 {
			id	0
			name	"ALH3"
		}
	}
]

#
# Pipeline definitions
#
IncludeByKey.PASSTHROUGH {
"false" {
	Object.Pipeline {
		host-copier-gain-mixin-playback [
			{
				index 0

				Object.Widget.host-copier.1 {
					stream_name "volume playback 0"
					pcm_id 0
				}
				Object.Widget.gain.1 {
					Object.Control.mixer.1 {
							name 'Pre Mixer $JACK_PLAYBACK_PCM_NAME Playback Volume'
						}
				}
			}
		]

		mixout-gain-alh-dai-copier-playback [
			{
				index 1

				Object.Widget.alh-copier.1 {
					stream_name $SDW_JACK_OUT_STREAM
					node_type $ALH_LINK_OUTPUT_CLASS
				}
				Object.Widget.gain.1 {
					Object.Control.mixer.1 {
						name 'Post Mixer $JACK_PLAYBACK_PCM_NAME Playback Volume'
					}
				}
			}
		]
	}
}
"true" {
	Object.Pipeline.host-gateway-playback [
		{
			index	0
			Object.Widget.host-copier.1 {
				stream_name "volume playback 0"
				pcm_id 0
				num_input_audio_formats 3
				Object.Base.input_audio_format [
					{
						in_bit_depth            16
						in_valid_bit_depth      16
					}
					{
						in_bit_depth            32
						in_valid_bit_depth      24
					}
					{
						in_bit_depth            32
						in_valid_bit_depth      32
					}
				]
				num_output_audio_formats 3
				Object.Base.output_audio_format [
					{
						out_bit_depth           16
						out_valid_bit_depth     16
					}
					{
						out_bit_depth           32
						out_valid_bit_depth     24
					}
					{
						out_bit_depth           32
						out_valid_bit_depth     32
					}
				]
			}
		}
	]

	Object.Widget {
		alh-copier [
			{
				stream_name $SDW_JACK_OUT_STREAM
				node_type $ALH_LINK_OUTPUT_CLASS
				num_input_audio_formats 3
				index 1
				type dai_in
				direction	playback
				num_input_pins 1
				Object.Base.input_audio_format [
					{
						in_bit_depth            16
						in_valid_bit_depth      16
					}
					{
						in_bit_depth            32
						in_valid_bit_depth      24
					}
					{
						in_bit_depth            32
						in_valid_bit_depth      32
					}
				]
				num_output_audio_formats 3
				Object.Base.output_audio_format [
					{
						out_bit_depth           16
						out_valid_bit_depth     16
					}
					{
						out_bit_depth           32
						out_valid_bit_depth     24
					}
					{
						out_bit_depth           32
						out_valid_bit_depth     32
					}
				]
			}
		]
		pipeline [
			{
				index			1
				priority		0
				lp_mode		0
				dynamic_pipeline	1
			}
		]
	}
	}
}

Object.Pipeline.host-gateway-capture [
	{
		index 10

		Object.Widget.host-copier.1 {
			stream_name	"Passthrough Capture 0"
			pcm_id 1
			num_input_audio_formats 9
			num_output_audio_formats 9
			Object.Base.audio_format.1 {
				# 32/32 -> 16/16 bits conversion is done here
				in_bit_depth	32
				in_valid_bit_depth	32
			}
			# 32-bit 48KHz 1ch
			Object.Base.input_audio_format.7 {
				in_channels		1
				in_bit_depth		32
				in_valid_bit_depth	32
				in_ch_cfg	$CHANNEL_CONFIG_MONO
				in_ch_map	$CHANNEL_MAP_MONO
			}
			Object.Base.output_audio_format.7 {
				out_bit_depth		32
				out_valid_bit_depth	32
				out_channels		1
				out_ch_cfg	$CHANNEL_CONFIG_MONO
				out_ch_map	$CHANNEL_MAP_MONO
			}
			# 24-bit 48KHz 1ch
			Object.Base.input_audio_format.8 {
				in_channels		1
				in_bit_depth		32
				in_valid_bit_depth	32
				in_ch_cfg	$CHANNEL_CONFIG_MONO
				in_ch_map	$CHANNEL_MAP_MONO
			}
			Object.Base.output_audio_format.8 {
				out_bit_depth		32
				out_valid_bit_depth	24
				out_channels		1
				out_ch_cfg	$CHANNEL_CONFIG_MONO
				out_ch_map	$CHANNEL_MAP_MONO
			}
			# 16-bit 48KHz 1ch
			Object.Base.input_audio_format.9 {
				in_channels		1
				in_bit_depth		32
				in_valid_bit_depth	32
				in_ch_cfg	$CHANNEL_CONFIG_MONO
				in_ch_map	$CHANNEL_MAP_MONO
			}
			Object.Base.output_audio_format.9 {
				out_channels		1
				out_ch_cfg	$CHANNEL_CONFIG_MONO
				out_ch_map	$CHANNEL_MAP_MONO
			}
		}
	}
]

# Jack capture pipeline widgets
Object.Widget {
	alh-copier [
		{
			stream_name	$SDW_JACK_IN_STREAM
			direction	"capture"
			type		"dai_out"
			index		11
			node_type $ALH_LINK_INPUT_CLASS
			num_input_audio_formats 1
			num_output_audio_formats 1
			num_output_pins 1

			Object.Base.audio_format.1 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
			}
		}
	]

	pipeline [
		{
			index		11
			priority		0
			lp_mode		0
			dynamic_pipeline	1
		}
	]
}

IncludeByKey.PASSTHROUGH {
"false" {
	Object.Widget.eqiir [
		{
			num_input_audio_formats 1
			num_output_audio_formats 1
			index		11
			Object.Base.audio_format.1 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
			}

			Object.Control.bytes."1" {
				<include/components/eqiir/highpass_40hz_0db_48khz.conf>
				name '$JACK_CAPTURE_PCM_NAME Capture IIR Eq'
			}
		}
	]
	}
}

Object.PCM.pcm [
	{
		name	"$JACK_PLAYBACK_PCM_NAME"
		id 0
		direction	"playback"
		Object.Base.fe_dai.1 {
			name	"$JACK_PLAYBACK_PCM_NAME"
		}

		Object.PCM.pcm_caps.1 {
			name "volume playback 0"
			formats 'S16_LE,S24_LE,S32_LE'
		}
	}
	{
		name	"$JACK_CAPTURE_PCM_NAME"
		id 1
		direction	"capture"
		Object.Base.fe_dai.1 {
			name	"$JACK_CAPTURE_PCM_NAME"
		}

		Object.PCM.pcm_caps.1 {
			name "Passthrough Capture 0"
			formats 'S16_LE,S24_LE,S32_LE'
			channels_min	$SDW_JACK_CAPTURE_CH
			channels_max	$SDW_JACK_CAPTURE_CH
		}
	}
]

IncludeByKey.PASSTHROUGH {
"false" {
	Object.Base.route [
		{
			source	"gain.1.1"
			sink	"alh-copier.$SDW_JACK_OUT_STREAM.0"
		}
		{
			source "mixin.0.1"
			sink "mixout.1.1"
		}
		{
			source	"alh-copier.$SDW_JACK_IN_STREAM.0"
			sink	"eqiir.11.0"
		}
		{
			source	"eqiir.11.0"
			sink	"host-copier.1.capture"
		}
		{
			source	"host-copier.0.playback"
			sink	"gain.0.1"
		}
	]
	}
"true"	{
	Object.Base.route [
		{
			source	"alh-copier.$SDW_JACK_IN_STREAM.0"
			sink	"host-copier.1.capture"
		}
		{
			source	"host-copier.0.playback"
			sink	"alh-copier.$SDW_JACK_OUT_STREAM.0"
		}
	]
	}
}
